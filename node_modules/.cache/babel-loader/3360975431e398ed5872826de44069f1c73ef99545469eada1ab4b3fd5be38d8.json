{"ast":null,"code":"/**\n * @license Fraction.js v4.3.7 31/08/2023\n * https://www.xarg.org/2014/03/rational-numbers-in-javascript/\n *\n * Copyright (c) 2023, Robert Eisele (robert@raw.org)\n * Dual licensed under the MIT or GPL Version 2 licenses.\n **/\n\n/**\n *\n * This class offers the possibility to calculate fractions.\n * You can pass a fraction in different formats. Either as array, as double, as string or as an integer.\n *\n * Array/Object form\n * [ 0 => <numerator>, 1 => <denominator> ]\n * [ n => <numerator>, d => <denominator> ]\n *\n * Integer form\n * - Single integer value\n *\n * Double form\n * - Single double value\n *\n * String form\n * 123.456 - a simple double\n * 123/456 - a string fraction\n * 123.'456' - a double with repeating decimal places\n * 123.(456) - synonym\n * 123.45'6' - a double with repeating last place\n * 123.45(6) - synonym\n *\n * Example:\n *\n * var f = new Fraction(\"9.4'31'\");\n * f.mul([-4, 3]).div(4.9);\n *\n */\n\n// Maximum search depth for cyclic rational numbers. 2000 should be more than enough.\n// Example: 1/7 = 0.(142857) has 6 repeating decimal places.\n// If MAX_CYCLE_LEN gets reduced, long cycles will not be detected and toString() only gets the first 10 digits\nvar MAX_CYCLE_LEN = 2000;\n\n// Parsed data to avoid calling \"new\" all the time\nvar P = {\n  \"s\": 1,\n  \"n\": 0,\n  \"d\": 1\n};\nfunction assign(n, s) {\n  if (isNaN(n = parseInt(n, 10))) {\n    throw InvalidParameter();\n  }\n  return n * s;\n}\n\n// Creates a new Fraction internally without the need of the bulky constructor\nfunction newFraction(n, d) {\n  if (d === 0) {\n    throw DivisionByZero();\n  }\n  var f = Object.create(Fraction.prototype);\n  f[\"s\"] = n < 0 ? -1 : 1;\n  n = n < 0 ? -n : n;\n  var a = gcd(n, d);\n  f[\"n\"] = n / a;\n  f[\"d\"] = d / a;\n  return f;\n}\nfunction factorize(num) {\n  var factors = {};\n  var n = num;\n  var i = 2;\n  var s = 4;\n  while (s <= n) {\n    while (n % i === 0) {\n      n /= i;\n      factors[i] = (factors[i] || 0) + 1;\n    }\n    s += 1 + 2 * i++;\n  }\n  if (n !== num) {\n    if (n > 1) factors[n] = (factors[n] || 0) + 1;\n  } else {\n    factors[num] = (factors[num] || 0) + 1;\n  }\n  return factors;\n}\nvar parse = function (p1, p2) {\n  var n = 0,\n    d = 1,\n    s = 1;\n  var v = 0,\n    w = 0,\n    x = 0,\n    y = 1,\n    z = 1;\n  var A = 0,\n    B = 1;\n  var C = 1,\n    D = 1;\n  var N = 10000000;\n  var M;\n  if (p1 === undefined || p1 === null) {\n    /* void */\n  } else if (p2 !== undefined) {\n    n = p1;\n    d = p2;\n    s = n * d;\n    if (n % 1 !== 0 || d % 1 !== 0) {\n      throw NonIntegerParameter();\n    }\n  } else switch (typeof p1) {\n    case \"object\":\n      {\n        if (\"d\" in p1 && \"n\" in p1) {\n          n = p1[\"n\"];\n          d = p1[\"d\"];\n          if (\"s\" in p1) n *= p1[\"s\"];\n        } else if (0 in p1) {\n          n = p1[0];\n          if (1 in p1) d = p1[1];\n        } else {\n          throw InvalidParameter();\n        }\n        s = n * d;\n        break;\n      }\n    case \"number\":\n      {\n        if (p1 < 0) {\n          s = p1;\n          p1 = -p1;\n        }\n        if (p1 % 1 === 0) {\n          n = p1;\n        } else if (p1 > 0) {\n          // check for != 0, scale would become NaN (log(0)), which converges really slow\n\n          if (p1 >= 1) {\n            z = Math.pow(10, Math.floor(1 + Math.log(p1) / Math.LN10));\n            p1 /= z;\n          }\n\n          // Using Farey Sequences\n          // http://www.johndcook.com/blog/2010/10/20/best-rational-approximation/\n\n          while (B <= N && D <= N) {\n            M = (A + C) / (B + D);\n            if (p1 === M) {\n              if (B + D <= N) {\n                n = A + C;\n                d = B + D;\n              } else if (D > B) {\n                n = C;\n                d = D;\n              } else {\n                n = A;\n                d = B;\n              }\n              break;\n            } else {\n              if (p1 > M) {\n                A += C;\n                B += D;\n              } else {\n                C += A;\n                D += B;\n              }\n              if (B > N) {\n                n = C;\n                d = D;\n              } else {\n                n = A;\n                d = B;\n              }\n            }\n          }\n          n *= z;\n        } else if (isNaN(p1) || isNaN(p2)) {\n          d = n = NaN;\n        }\n        break;\n      }\n    case \"string\":\n      {\n        B = p1.match(/\\d+|./g);\n        if (B === null) throw InvalidParameter();\n        if (B[A] === '-') {\n          // Check for minus sign at the beginning\n          s = -1;\n          A++;\n        } else if (B[A] === '+') {\n          // Check for plus sign at the beginning\n          A++;\n        }\n        if (B.length === A + 1) {\n          // Check if it's just a simple number \"1234\"\n          w = assign(B[A++], s);\n        } else if (B[A + 1] === '.' || B[A] === '.') {\n          // Check if it's a decimal number\n\n          if (B[A] !== '.') {\n            // Handle 0.5 and .5\n            v = assign(B[A++], s);\n          }\n          A++;\n\n          // Check for decimal places\n          if (A + 1 === B.length || B[A + 1] === '(' && B[A + 3] === ')' || B[A + 1] === \"'\" && B[A + 3] === \"'\") {\n            w = assign(B[A], s);\n            y = Math.pow(10, B[A].length);\n            A++;\n          }\n\n          // Check for repeating places\n          if (B[A] === '(' && B[A + 2] === ')' || B[A] === \"'\" && B[A + 2] === \"'\") {\n            x = assign(B[A + 1], s);\n            z = Math.pow(10, B[A + 1].length) - 1;\n            A += 3;\n          }\n        } else if (B[A + 1] === '/' || B[A + 1] === ':') {\n          // Check for a simple fraction \"123/456\" or \"123:456\"\n          w = assign(B[A], s);\n          y = assign(B[A + 2], 1);\n          A += 3;\n        } else if (B[A + 3] === '/' && B[A + 1] === ' ') {\n          // Check for a complex fraction \"123 1/2\"\n          v = assign(B[A], s);\n          w = assign(B[A + 2], s);\n          y = assign(B[A + 4], 1);\n          A += 5;\n        }\n        if (B.length <= A) {\n          // Check for more tokens on the stack\n          d = y * z;\n          s = /* void */\n          n = x + d * v + z * w;\n          break;\n        }\n\n        /* Fall through on error */\n      }\n    default:\n      throw InvalidParameter();\n  }\n  if (d === 0) {\n    throw DivisionByZero();\n  }\n  P[\"s\"] = s < 0 ? -1 : 1;\n  P[\"n\"] = Math.abs(n);\n  P[\"d\"] = Math.abs(d);\n};\nfunction modpow(b, e, m) {\n  var r = 1;\n  for (; e > 0; b = b * b % m, e >>= 1) {\n    if (e & 1) {\n      r = r * b % m;\n    }\n  }\n  return r;\n}\nfunction cycleLen(n, d) {\n  for (; d % 2 === 0; d /= 2) {}\n  for (; d % 5 === 0; d /= 5) {}\n  if (d === 1)\n    // Catch non-cyclic numbers\n    return 0;\n\n  // If we would like to compute really large numbers quicker, we could make use of Fermat's little theorem:\n  // 10^(d-1) % d == 1\n  // However, we don't need such large numbers and MAX_CYCLE_LEN should be the capstone,\n  // as we want to translate the numbers to strings.\n\n  var rem = 10 % d;\n  var t = 1;\n  for (; rem !== 1; t++) {\n    rem = rem * 10 % d;\n    if (t > MAX_CYCLE_LEN) return 0; // Returning 0 here means that we don't print it as a cyclic number. It's likely that the answer is `d-1`\n  }\n  return t;\n}\nfunction cycleStart(n, d, len) {\n  var rem1 = 1;\n  var rem2 = modpow(10, len, d);\n  for (var t = 0; t < 300; t++) {\n    // s < ~log10(Number.MAX_VALUE)\n    // Solve 10^s == 10^(s+t) (mod d)\n\n    if (rem1 === rem2) return t;\n    rem1 = rem1 * 10 % d;\n    rem2 = rem2 * 10 % d;\n  }\n  return 0;\n}\nfunction gcd(a, b) {\n  if (!a) return b;\n  if (!b) return a;\n  while (1) {\n    a %= b;\n    if (!a) return b;\n    b %= a;\n    if (!b) return a;\n  }\n}\n;\n\n/**\n * Module constructor\n *\n * @constructor\n * @param {number|Fraction=} a\n * @param {number=} b\n */\nexport default function Fraction(a, b) {\n  parse(a, b);\n  if (this instanceof Fraction) {\n    a = gcd(P[\"d\"], P[\"n\"]); // Abuse variable a\n    this[\"s\"] = P[\"s\"];\n    this[\"n\"] = P[\"n\"] / a;\n    this[\"d\"] = P[\"d\"] / a;\n  } else {\n    return newFraction(P['s'] * P['n'], P['d']);\n  }\n}\nvar DivisionByZero = function () {\n  return new Error(\"Division by Zero\");\n};\nvar InvalidParameter = function () {\n  return new Error(\"Invalid argument\");\n};\nvar NonIntegerParameter = function () {\n  return new Error(\"Parameters must be integer\");\n};\nFraction.prototype = {\n  \"s\": 1,\n  \"n\": 0,\n  \"d\": 1,\n  /**\n   * Calculates the absolute value\n   *\n   * Ex: new Fraction(-4).abs() => 4\n   **/\n  \"abs\": function () {\n    return newFraction(this[\"n\"], this[\"d\"]);\n  },\n  /**\n   * Inverts the sign of the current fraction\n   *\n   * Ex: new Fraction(-4).neg() => 4\n   **/\n  \"neg\": function () {\n    return newFraction(-this[\"s\"] * this[\"n\"], this[\"d\"]);\n  },\n  /**\n   * Adds two rational numbers\n   *\n   * Ex: new Fraction({n: 2, d: 3}).add(\"14.9\") => 467 / 30\n   **/\n  \"add\": function (a, b) {\n    parse(a, b);\n    return newFraction(this[\"s\"] * this[\"n\"] * P[\"d\"] + P[\"s\"] * this[\"d\"] * P[\"n\"], this[\"d\"] * P[\"d\"]);\n  },\n  /**\n   * Subtracts two rational numbers\n   *\n   * Ex: new Fraction({n: 2, d: 3}).add(\"14.9\") => -427 / 30\n   **/\n  \"sub\": function (a, b) {\n    parse(a, b);\n    return newFraction(this[\"s\"] * this[\"n\"] * P[\"d\"] - P[\"s\"] * this[\"d\"] * P[\"n\"], this[\"d\"] * P[\"d\"]);\n  },\n  /**\n   * Multiplies two rational numbers\n   *\n   * Ex: new Fraction(\"-17.(345)\").mul(3) => 5776 / 111\n   **/\n  \"mul\": function (a, b) {\n    parse(a, b);\n    return newFraction(this[\"s\"] * P[\"s\"] * this[\"n\"] * P[\"n\"], this[\"d\"] * P[\"d\"]);\n  },\n  /**\n   * Divides two rational numbers\n   *\n   * Ex: new Fraction(\"-17.(345)\").inverse().div(3)\n   **/\n  \"div\": function (a, b) {\n    parse(a, b);\n    return newFraction(this[\"s\"] * P[\"s\"] * this[\"n\"] * P[\"d\"], this[\"d\"] * P[\"n\"]);\n  },\n  /**\n   * Clones the actual object\n   *\n   * Ex: new Fraction(\"-17.(345)\").clone()\n   **/\n  \"clone\": function () {\n    return newFraction(this['s'] * this['n'], this['d']);\n  },\n  /**\n   * Calculates the modulo of two rational numbers - a more precise fmod\n   *\n   * Ex: new Fraction('4.(3)').mod([7, 8]) => (13/3) % (7/8) = (5/6)\n   **/\n  \"mod\": function (a, b) {\n    if (isNaN(this['n']) || isNaN(this['d'])) {\n      return new Fraction(NaN);\n    }\n    if (a === undefined) {\n      return newFraction(this[\"s\"] * this[\"n\"] % this[\"d\"], 1);\n    }\n    parse(a, b);\n    if (0 === P[\"n\"] && 0 === this[\"d\"]) {\n      throw DivisionByZero();\n    }\n\n    /*\n     * First silly attempt, kinda slow\n     *\n     return that[\"sub\"]({\n     \"n\": num[\"n\"] * Math.floor((this.n / this.d) / (num.n / num.d)),\n     \"d\": num[\"d\"],\n     \"s\": this[\"s\"]\n     });*/\n\n    /*\n     * New attempt: a1 / b1 = a2 / b2 * q + r\n     * => b2 * a1 = a2 * b1 * q + b1 * b2 * r\n     * => (b2 * a1 % a2 * b1) / (b1 * b2)\n     */\n    return newFraction(this[\"s\"] * (P[\"d\"] * this[\"n\"]) % (P[\"n\"] * this[\"d\"]), P[\"d\"] * this[\"d\"]);\n  },\n  /**\n   * Calculates the fractional gcd of two rational numbers\n   *\n   * Ex: new Fraction(5,8).gcd(3,7) => 1/56\n   */\n  \"gcd\": function (a, b) {\n    parse(a, b);\n\n    // gcd(a / b, c / d) = gcd(a, c) / lcm(b, d)\n\n    return newFraction(gcd(P[\"n\"], this[\"n\"]) * gcd(P[\"d\"], this[\"d\"]), P[\"d\"] * this[\"d\"]);\n  },\n  /**\n   * Calculates the fractional lcm of two rational numbers\n   *\n   * Ex: new Fraction(5,8).lcm(3,7) => 15\n   */\n  \"lcm\": function (a, b) {\n    parse(a, b);\n\n    // lcm(a / b, c / d) = lcm(a, c) / gcd(b, d)\n\n    if (P[\"n\"] === 0 && this[\"n\"] === 0) {\n      return newFraction(0, 1);\n    }\n    return newFraction(P[\"n\"] * this[\"n\"], gcd(P[\"n\"], this[\"n\"]) * gcd(P[\"d\"], this[\"d\"]));\n  },\n  /**\n   * Calculates the ceil of a rational number\n   *\n   * Ex: new Fraction('4.(3)').ceil() => (5 / 1)\n   **/\n  \"ceil\": function (places) {\n    places = Math.pow(10, places || 0);\n    if (isNaN(this[\"n\"]) || isNaN(this[\"d\"])) {\n      return new Fraction(NaN);\n    }\n    return newFraction(Math.ceil(places * this[\"s\"] * this[\"n\"] / this[\"d\"]), places);\n  },\n  /**\n   * Calculates the floor of a rational number\n   *\n   * Ex: new Fraction('4.(3)').floor() => (4 / 1)\n   **/\n  \"floor\": function (places) {\n    places = Math.pow(10, places || 0);\n    if (isNaN(this[\"n\"]) || isNaN(this[\"d\"])) {\n      return new Fraction(NaN);\n    }\n    return newFraction(Math.floor(places * this[\"s\"] * this[\"n\"] / this[\"d\"]), places);\n  },\n  /**\n   * Rounds a rational number\n   *\n   * Ex: new Fraction('4.(3)').round() => (4 / 1)\n   **/\n  \"round\": function (places) {\n    places = Math.pow(10, places || 0);\n    if (isNaN(this[\"n\"]) || isNaN(this[\"d\"])) {\n      return new Fraction(NaN);\n    }\n    return newFraction(Math.round(places * this[\"s\"] * this[\"n\"] / this[\"d\"]), places);\n  },\n  /**\n   * Rounds a rational number to a multiple of another rational number\n   *\n   * Ex: new Fraction('0.9').roundTo(\"1/8\") => 7 / 8\n   **/\n  \"roundTo\": function (a, b) {\n    /*\n    k * x/y ≤ a/b < (k+1) * x/y\n    ⇔ k ≤ a/b / (x/y) < (k+1)\n    ⇔ k = floor(a/b * y/x)\n    */\n\n    parse(a, b);\n    return newFraction(this['s'] * Math.round(this['n'] * P['d'] / (this['d'] * P['n'])) * P['n'], P['d']);\n  },\n  /**\n   * Gets the inverse of the fraction, means numerator and denominator are exchanged\n   *\n   * Ex: new Fraction([-3, 4]).inverse() => -4 / 3\n   **/\n  \"inverse\": function () {\n    return newFraction(this[\"s\"] * this[\"d\"], this[\"n\"]);\n  },\n  /**\n   * Calculates the fraction to some rational exponent, if possible\n   *\n   * Ex: new Fraction(-1,2).pow(-3) => -8\n   */\n  \"pow\": function (a, b) {\n    parse(a, b);\n\n    // Trivial case when exp is an integer\n\n    if (P['d'] === 1) {\n      if (P['s'] < 0) {\n        return newFraction(Math.pow(this['s'] * this[\"d\"], P['n']), Math.pow(this[\"n\"], P['n']));\n      } else {\n        return newFraction(Math.pow(this['s'] * this[\"n\"], P['n']), Math.pow(this[\"d\"], P['n']));\n      }\n    }\n\n    // Negative roots become complex\n    //     (-a/b)^(c/d) = x\n    // <=> (-1)^(c/d) * (a/b)^(c/d) = x\n    // <=> (cos(pi) + i*sin(pi))^(c/d) * (a/b)^(c/d) = x         # rotate 1 by 180°\n    // <=> (cos(c*pi/d) + i*sin(c*pi/d)) * (a/b)^(c/d) = x       # DeMoivre's formula in Q ( https://proofwiki.org/wiki/De_Moivre%27s_Formula/Rational_Index )\n    // From which follows that only for c=0 the root is non-complex. c/d is a reduced fraction, so that sin(c/dpi)=0 occurs for d=1, which is handled by our trivial case.\n    if (this['s'] < 0) return null;\n\n    // Now prime factor n and d\n    var N = factorize(this['n']);\n    var D = factorize(this['d']);\n\n    // Exponentiate and take root for n and d individually\n    var n = 1;\n    var d = 1;\n    for (var k in N) {\n      if (k === '1') continue;\n      if (k === '0') {\n        n = 0;\n        break;\n      }\n      N[k] *= P['n'];\n      if (N[k] % P['d'] === 0) {\n        N[k] /= P['d'];\n      } else return null;\n      n *= Math.pow(k, N[k]);\n    }\n    for (var k in D) {\n      if (k === '1') continue;\n      D[k] *= P['n'];\n      if (D[k] % P['d'] === 0) {\n        D[k] /= P['d'];\n      } else return null;\n      d *= Math.pow(k, D[k]);\n    }\n    if (P['s'] < 0) {\n      return newFraction(d, n);\n    }\n    return newFraction(n, d);\n  },\n  /**\n   * Check if two rational numbers are the same\n   *\n   * Ex: new Fraction(19.6).equals([98, 5]);\n   **/\n  \"equals\": function (a, b) {\n    parse(a, b);\n    return this[\"s\"] * this[\"n\"] * P[\"d\"] === P[\"s\"] * P[\"n\"] * this[\"d\"]; // Same as compare() === 0\n  },\n  /**\n   * Check if two rational numbers are the same\n   *\n   * Ex: new Fraction(19.6).equals([98, 5]);\n   **/\n  \"compare\": function (a, b) {\n    parse(a, b);\n    var t = this[\"s\"] * this[\"n\"] * P[\"d\"] - P[\"s\"] * P[\"n\"] * this[\"d\"];\n    return (0 < t) - (t < 0);\n  },\n  \"simplify\": function (eps) {\n    if (isNaN(this['n']) || isNaN(this['d'])) {\n      return this;\n    }\n    eps = eps || 0.001;\n    var thisABS = this['abs']();\n    var cont = thisABS['toContinued']();\n    for (var i = 1; i < cont.length; i++) {\n      var s = newFraction(cont[i - 1], 1);\n      for (var k = i - 2; k >= 0; k--) {\n        s = s['inverse']()['add'](cont[k]);\n      }\n      if (Math.abs(s['sub'](thisABS).valueOf()) < eps) {\n        return s['mul'](this['s']);\n      }\n    }\n    return this;\n  },\n  /**\n   * Check if two rational numbers are divisible\n   *\n   * Ex: new Fraction(19.6).divisible(1.5);\n   */\n  \"divisible\": function (a, b) {\n    parse(a, b);\n    return !(!(P[\"n\"] * this[\"d\"]) || this[\"n\"] * P[\"d\"] % (P[\"n\"] * this[\"d\"]));\n  },\n  /**\n   * Returns a decimal representation of the fraction\n   *\n   * Ex: new Fraction(\"100.'91823'\").valueOf() => 100.91823918239183\n   **/\n  'valueOf': function () {\n    return this[\"s\"] * this[\"n\"] / this[\"d\"];\n  },\n  /**\n   * Returns a string-fraction representation of a Fraction object\n   *\n   * Ex: new Fraction(\"1.'3'\").toFraction(true) => \"4 1/3\"\n   **/\n  'toFraction': function (excludeWhole) {\n    var whole,\n      str = \"\";\n    var n = this[\"n\"];\n    var d = this[\"d\"];\n    if (this[\"s\"] < 0) {\n      str += '-';\n    }\n    if (d === 1) {\n      str += n;\n    } else {\n      if (excludeWhole && (whole = Math.floor(n / d)) > 0) {\n        str += whole;\n        str += \" \";\n        n %= d;\n      }\n      str += n;\n      str += '/';\n      str += d;\n    }\n    return str;\n  },\n  /**\n   * Returns a latex representation of a Fraction object\n   *\n   * Ex: new Fraction(\"1.'3'\").toLatex() => \"\\frac{4}{3}\"\n   **/\n  'toLatex': function (excludeWhole) {\n    var whole,\n      str = \"\";\n    var n = this[\"n\"];\n    var d = this[\"d\"];\n    if (this[\"s\"] < 0) {\n      str += '-';\n    }\n    if (d === 1) {\n      str += n;\n    } else {\n      if (excludeWhole && (whole = Math.floor(n / d)) > 0) {\n        str += whole;\n        n %= d;\n      }\n      str += \"\\\\frac{\";\n      str += n;\n      str += '}{';\n      str += d;\n      str += '}';\n    }\n    return str;\n  },\n  /**\n   * Returns an array of continued fraction elements\n   *\n   * Ex: new Fraction(\"7/8\").toContinued() => [0,1,7]\n   */\n  'toContinued': function () {\n    var t;\n    var a = this['n'];\n    var b = this['d'];\n    var res = [];\n    if (isNaN(a) || isNaN(b)) {\n      return res;\n    }\n    do {\n      res.push(Math.floor(a / b));\n      t = a % b;\n      a = b;\n      b = t;\n    } while (a !== 1);\n    return res;\n  },\n  /**\n   * Creates a string representation of a fraction with all digits\n   *\n   * Ex: new Fraction(\"100.'91823'\").toString() => \"100.(91823)\"\n   **/\n  'toString': function (dec) {\n    var N = this[\"n\"];\n    var D = this[\"d\"];\n    if (isNaN(N) || isNaN(D)) {\n      return \"NaN\";\n    }\n    dec = dec || 15; // 15 = decimal places when no repetation\n\n    var cycLen = cycleLen(N, D); // Cycle length\n    var cycOff = cycleStart(N, D, cycLen); // Cycle start\n\n    var str = this['s'] < 0 ? \"-\" : \"\";\n    str += N / D | 0;\n    N %= D;\n    N *= 10;\n    if (N) str += \".\";\n    if (cycLen) {\n      for (var i = cycOff; i--;) {\n        str += N / D | 0;\n        N %= D;\n        N *= 10;\n      }\n      str += \"(\";\n      for (var i = cycLen; i--;) {\n        str += N / D | 0;\n        N %= D;\n        N *= 10;\n      }\n      str += \")\";\n    } else {\n      for (var i = dec; N && i--;) {\n        str += N / D | 0;\n        N %= D;\n        N *= 10;\n      }\n    }\n    return str;\n  }\n};","map":{"version":3,"names":["MAX_CYCLE_LEN","P","assign","n","s","isNaN","parseInt","InvalidParameter","newFraction","d","DivisionByZero","f","Object","create","Fraction","prototype","a","gcd","factorize","num","factors","i","parse","p1","p2","v","w","x","y","z","A","B","C","D","N","M","undefined","NonIntegerParameter","Math","pow","floor","log","LN10","NaN","match","length","abs","modpow","b","e","m","r","cycleLen","rem","t","cycleStart","len","rem1","rem2","Error","neg","add","sub","mul","div","clone","mod","lcm","ceil","places","round","roundTo","inverse","k","equals","compare","simplify","eps","thisABS","cont","valueOf","divisible","toFraction","excludeWhole","whole","str","toLatex","toContinued","res","push","toString","dec","cycLen","cycOff"],"sources":["G:/New folder (2)/today_pay/node_modules/fraction.js/fraction.js"],"sourcesContent":["/**\n * @license Fraction.js v4.3.7 31/08/2023\n * https://www.xarg.org/2014/03/rational-numbers-in-javascript/\n *\n * Copyright (c) 2023, Robert Eisele (robert@raw.org)\n * Dual licensed under the MIT or GPL Version 2 licenses.\n **/\n\n\n/**\n *\n * This class offers the possibility to calculate fractions.\n * You can pass a fraction in different formats. Either as array, as double, as string or as an integer.\n *\n * Array/Object form\n * [ 0 => <numerator>, 1 => <denominator> ]\n * [ n => <numerator>, d => <denominator> ]\n *\n * Integer form\n * - Single integer value\n *\n * Double form\n * - Single double value\n *\n * String form\n * 123.456 - a simple double\n * 123/456 - a string fraction\n * 123.'456' - a double with repeating decimal places\n * 123.(456) - synonym\n * 123.45'6' - a double with repeating last place\n * 123.45(6) - synonym\n *\n * Example:\n *\n * var f = new Fraction(\"9.4'31'\");\n * f.mul([-4, 3]).div(4.9);\n *\n */\n\n\n// Maximum search depth for cyclic rational numbers. 2000 should be more than enough.\n// Example: 1/7 = 0.(142857) has 6 repeating decimal places.\n// If MAX_CYCLE_LEN gets reduced, long cycles will not be detected and toString() only gets the first 10 digits\nvar MAX_CYCLE_LEN = 2000;\n\n// Parsed data to avoid calling \"new\" all the time\nvar P = {\n  \"s\": 1,\n  \"n\": 0,\n  \"d\": 1\n};\n\nfunction assign(n, s) {\n\n  if (isNaN(n = parseInt(n, 10))) {\n    throw InvalidParameter();\n  }\n  return n * s;\n}\n\n// Creates a new Fraction internally without the need of the bulky constructor\nfunction newFraction(n, d) {\n\n  if (d === 0) {\n    throw DivisionByZero();\n  }\n\n  var f = Object.create(Fraction.prototype);\n  f[\"s\"] = n < 0 ? -1 : 1;\n\n  n = n < 0 ? -n : n;\n\n  var a = gcd(n, d);\n\n  f[\"n\"] = n / a;\n  f[\"d\"] = d / a;\n  return f;\n}\n\nfunction factorize(num) {\n\n  var factors = {};\n\n  var n = num;\n  var i = 2;\n  var s = 4;\n\n  while (s <= n) {\n\n    while (n % i === 0) {\n      n/= i;\n      factors[i] = (factors[i] || 0) + 1;\n    }\n    s+= 1 + 2 * i++;\n  }\n\n  if (n !== num) {\n    if (n > 1)\n      factors[n] = (factors[n] || 0) + 1;\n  } else {\n    factors[num] = (factors[num] || 0) + 1;\n  }\n  return factors;\n}\n\nvar parse = function(p1, p2) {\n\n  var n = 0, d = 1, s = 1;\n  var v = 0, w = 0, x = 0, y = 1, z = 1;\n\n  var A = 0, B = 1;\n  var C = 1, D = 1;\n\n  var N = 10000000;\n  var M;\n\n  if (p1 === undefined || p1 === null) {\n    /* void */\n  } else if (p2 !== undefined) {\n    n = p1;\n    d = p2;\n    s = n * d;\n\n    if (n % 1 !== 0 || d % 1 !== 0) {\n      throw NonIntegerParameter();\n    }\n\n  } else\n    switch (typeof p1) {\n\n      case \"object\":\n        {\n          if (\"d\" in p1 && \"n\" in p1) {\n            n = p1[\"n\"];\n            d = p1[\"d\"];\n            if (\"s\" in p1)\n              n*= p1[\"s\"];\n          } else if (0 in p1) {\n            n = p1[0];\n            if (1 in p1)\n              d = p1[1];\n          } else {\n            throw InvalidParameter();\n          }\n          s = n * d;\n          break;\n        }\n      case \"number\":\n        {\n          if (p1 < 0) {\n            s = p1;\n            p1 = -p1;\n          }\n\n          if (p1 % 1 === 0) {\n            n = p1;\n          } else if (p1 > 0) { // check for != 0, scale would become NaN (log(0)), which converges really slow\n\n            if (p1 >= 1) {\n              z = Math.pow(10, Math.floor(1 + Math.log(p1) / Math.LN10));\n              p1/= z;\n            }\n\n            // Using Farey Sequences\n            // http://www.johndcook.com/blog/2010/10/20/best-rational-approximation/\n\n            while (B <= N && D <= N) {\n              M = (A + C) / (B + D);\n\n              if (p1 === M) {\n                if (B + D <= N) {\n                  n = A + C;\n                  d = B + D;\n                } else if (D > B) {\n                  n = C;\n                  d = D;\n                } else {\n                  n = A;\n                  d = B;\n                }\n                break;\n\n              } else {\n\n                if (p1 > M) {\n                  A+= C;\n                  B+= D;\n                } else {\n                  C+= A;\n                  D+= B;\n                }\n\n                if (B > N) {\n                  n = C;\n                  d = D;\n                } else {\n                  n = A;\n                  d = B;\n                }\n              }\n            }\n            n*= z;\n          } else if (isNaN(p1) || isNaN(p2)) {\n            d = n = NaN;\n          }\n          break;\n        }\n      case \"string\":\n        {\n          B = p1.match(/\\d+|./g);\n\n          if (B === null)\n            throw InvalidParameter();\n\n          if (B[A] === '-') {// Check for minus sign at the beginning\n            s = -1;\n            A++;\n          } else if (B[A] === '+') {// Check for plus sign at the beginning\n            A++;\n          }\n\n          if (B.length === A + 1) { // Check if it's just a simple number \"1234\"\n            w = assign(B[A++], s);\n          } else if (B[A + 1] === '.' || B[A] === '.') { // Check if it's a decimal number\n\n            if (B[A] !== '.') { // Handle 0.5 and .5\n              v = assign(B[A++], s);\n            }\n            A++;\n\n            // Check for decimal places\n            if (A + 1 === B.length || B[A + 1] === '(' && B[A + 3] === ')' || B[A + 1] === \"'\" && B[A + 3] === \"'\") {\n              w = assign(B[A], s);\n              y = Math.pow(10, B[A].length);\n              A++;\n            }\n\n            // Check for repeating places\n            if (B[A] === '(' && B[A + 2] === ')' || B[A] === \"'\" && B[A + 2] === \"'\") {\n              x = assign(B[A + 1], s);\n              z = Math.pow(10, B[A + 1].length) - 1;\n              A+= 3;\n            }\n\n          } else if (B[A + 1] === '/' || B[A + 1] === ':') { // Check for a simple fraction \"123/456\" or \"123:456\"\n            w = assign(B[A], s);\n            y = assign(B[A + 2], 1);\n            A+= 3;\n          } else if (B[A + 3] === '/' && B[A + 1] === ' ') { // Check for a complex fraction \"123 1/2\"\n            v = assign(B[A], s);\n            w = assign(B[A + 2], s);\n            y = assign(B[A + 4], 1);\n            A+= 5;\n          }\n\n          if (B.length <= A) { // Check for more tokens on the stack\n            d = y * z;\n            s = /* void */\n            n = x + d * v + z * w;\n            break;\n          }\n\n          /* Fall through on error */\n        }\n      default:\n        throw InvalidParameter();\n    }\n\n  if (d === 0) {\n    throw DivisionByZero();\n  }\n\n  P[\"s\"] = s < 0 ? -1 : 1;\n  P[\"n\"] = Math.abs(n);\n  P[\"d\"] = Math.abs(d);\n};\n\nfunction modpow(b, e, m) {\n\n  var r = 1;\n  for (; e > 0; b = (b * b) % m, e >>= 1) {\n\n    if (e & 1) {\n      r = (r * b) % m;\n    }\n  }\n  return r;\n}\n\n\nfunction cycleLen(n, d) {\n\n  for (; d % 2 === 0;\n    d/= 2) {\n  }\n\n  for (; d % 5 === 0;\n    d/= 5) {\n  }\n\n  if (d === 1) // Catch non-cyclic numbers\n    return 0;\n\n  // If we would like to compute really large numbers quicker, we could make use of Fermat's little theorem:\n  // 10^(d-1) % d == 1\n  // However, we don't need such large numbers and MAX_CYCLE_LEN should be the capstone,\n  // as we want to translate the numbers to strings.\n\n  var rem = 10 % d;\n  var t = 1;\n\n  for (; rem !== 1; t++) {\n    rem = rem * 10 % d;\n\n    if (t > MAX_CYCLE_LEN)\n      return 0; // Returning 0 here means that we don't print it as a cyclic number. It's likely that the answer is `d-1`\n  }\n  return t;\n}\n\n\nfunction cycleStart(n, d, len) {\n\n  var rem1 = 1;\n  var rem2 = modpow(10, len, d);\n\n  for (var t = 0; t < 300; t++) { // s < ~log10(Number.MAX_VALUE)\n    // Solve 10^s == 10^(s+t) (mod d)\n\n    if (rem1 === rem2)\n      return t;\n\n    rem1 = rem1 * 10 % d;\n    rem2 = rem2 * 10 % d;\n  }\n  return 0;\n}\n\nfunction gcd(a, b) {\n\n  if (!a)\n    return b;\n  if (!b)\n    return a;\n\n  while (1) {\n    a%= b;\n    if (!a)\n      return b;\n    b%= a;\n    if (!b)\n      return a;\n  }\n};\n\n/**\n * Module constructor\n *\n * @constructor\n * @param {number|Fraction=} a\n * @param {number=} b\n */\nexport default function Fraction(a, b) {\n\n  parse(a, b);\n\n  if (this instanceof Fraction) {\n    a = gcd(P[\"d\"], P[\"n\"]); // Abuse variable a\n    this[\"s\"] = P[\"s\"];\n    this[\"n\"] = P[\"n\"] / a;\n    this[\"d\"] = P[\"d\"] / a;\n  } else {\n    return newFraction(P['s'] * P['n'], P['d']);\n  }\n}\n\nvar DivisionByZero = function() { return new Error(\"Division by Zero\"); };\nvar InvalidParameter = function() { return new Error(\"Invalid argument\"); };\nvar NonIntegerParameter = function() { return new Error(\"Parameters must be integer\"); };\n\nFraction.prototype = {\n\n  \"s\": 1,\n  \"n\": 0,\n  \"d\": 1,\n\n  /**\n   * Calculates the absolute value\n   *\n   * Ex: new Fraction(-4).abs() => 4\n   **/\n  \"abs\": function() {\n\n    return newFraction(this[\"n\"], this[\"d\"]);\n  },\n\n  /**\n   * Inverts the sign of the current fraction\n   *\n   * Ex: new Fraction(-4).neg() => 4\n   **/\n  \"neg\": function() {\n\n    return newFraction(-this[\"s\"] * this[\"n\"], this[\"d\"]);\n  },\n\n  /**\n   * Adds two rational numbers\n   *\n   * Ex: new Fraction({n: 2, d: 3}).add(\"14.9\") => 467 / 30\n   **/\n  \"add\": function(a, b) {\n\n    parse(a, b);\n    return newFraction(\n      this[\"s\"] * this[\"n\"] * P[\"d\"] + P[\"s\"] * this[\"d\"] * P[\"n\"],\n      this[\"d\"] * P[\"d\"]\n    );\n  },\n\n  /**\n   * Subtracts two rational numbers\n   *\n   * Ex: new Fraction({n: 2, d: 3}).add(\"14.9\") => -427 / 30\n   **/\n  \"sub\": function(a, b) {\n\n    parse(a, b);\n    return newFraction(\n      this[\"s\"] * this[\"n\"] * P[\"d\"] - P[\"s\"] * this[\"d\"] * P[\"n\"],\n      this[\"d\"] * P[\"d\"]\n    );\n  },\n\n  /**\n   * Multiplies two rational numbers\n   *\n   * Ex: new Fraction(\"-17.(345)\").mul(3) => 5776 / 111\n   **/\n  \"mul\": function(a, b) {\n\n    parse(a, b);\n    return newFraction(\n      this[\"s\"] * P[\"s\"] * this[\"n\"] * P[\"n\"],\n      this[\"d\"] * P[\"d\"]\n    );\n  },\n\n  /**\n   * Divides two rational numbers\n   *\n   * Ex: new Fraction(\"-17.(345)\").inverse().div(3)\n   **/\n  \"div\": function(a, b) {\n\n    parse(a, b);\n    return newFraction(\n      this[\"s\"] * P[\"s\"] * this[\"n\"] * P[\"d\"],\n      this[\"d\"] * P[\"n\"]\n    );\n  },\n\n  /**\n   * Clones the actual object\n   *\n   * Ex: new Fraction(\"-17.(345)\").clone()\n   **/\n  \"clone\": function() {\n    return newFraction(this['s'] * this['n'], this['d']);\n  },\n\n  /**\n   * Calculates the modulo of two rational numbers - a more precise fmod\n   *\n   * Ex: new Fraction('4.(3)').mod([7, 8]) => (13/3) % (7/8) = (5/6)\n   **/\n  \"mod\": function(a, b) {\n\n    if (isNaN(this['n']) || isNaN(this['d'])) {\n      return new Fraction(NaN);\n    }\n\n    if (a === undefined) {\n      return newFraction(this[\"s\"] * this[\"n\"] % this[\"d\"], 1);\n    }\n\n    parse(a, b);\n    if (0 === P[\"n\"] && 0 === this[\"d\"]) {\n      throw DivisionByZero();\n    }\n\n    /*\n     * First silly attempt, kinda slow\n     *\n     return that[\"sub\"]({\n     \"n\": num[\"n\"] * Math.floor((this.n / this.d) / (num.n / num.d)),\n     \"d\": num[\"d\"],\n     \"s\": this[\"s\"]\n     });*/\n\n    /*\n     * New attempt: a1 / b1 = a2 / b2 * q + r\n     * => b2 * a1 = a2 * b1 * q + b1 * b2 * r\n     * => (b2 * a1 % a2 * b1) / (b1 * b2)\n     */\n    return newFraction(\n      this[\"s\"] * (P[\"d\"] * this[\"n\"]) % (P[\"n\"] * this[\"d\"]),\n      P[\"d\"] * this[\"d\"]\n    );\n  },\n\n  /**\n   * Calculates the fractional gcd of two rational numbers\n   *\n   * Ex: new Fraction(5,8).gcd(3,7) => 1/56\n   */\n  \"gcd\": function(a, b) {\n\n    parse(a, b);\n\n    // gcd(a / b, c / d) = gcd(a, c) / lcm(b, d)\n\n    return newFraction(gcd(P[\"n\"], this[\"n\"]) * gcd(P[\"d\"], this[\"d\"]), P[\"d\"] * this[\"d\"]);\n  },\n\n  /**\n   * Calculates the fractional lcm of two rational numbers\n   *\n   * Ex: new Fraction(5,8).lcm(3,7) => 15\n   */\n  \"lcm\": function(a, b) {\n\n    parse(a, b);\n\n    // lcm(a / b, c / d) = lcm(a, c) / gcd(b, d)\n\n    if (P[\"n\"] === 0 && this[\"n\"] === 0) {\n      return newFraction(0, 1);\n    }\n    return newFraction(P[\"n\"] * this[\"n\"], gcd(P[\"n\"], this[\"n\"]) * gcd(P[\"d\"], this[\"d\"]));\n  },\n\n  /**\n   * Calculates the ceil of a rational number\n   *\n   * Ex: new Fraction('4.(3)').ceil() => (5 / 1)\n   **/\n  \"ceil\": function(places) {\n\n    places = Math.pow(10, places || 0);\n\n    if (isNaN(this[\"n\"]) || isNaN(this[\"d\"])) {\n      return new Fraction(NaN);\n    }\n    return newFraction(Math.ceil(places * this[\"s\"] * this[\"n\"] / this[\"d\"]), places);\n  },\n\n  /**\n   * Calculates the floor of a rational number\n   *\n   * Ex: new Fraction('4.(3)').floor() => (4 / 1)\n   **/\n  \"floor\": function(places) {\n\n    places = Math.pow(10, places || 0);\n\n    if (isNaN(this[\"n\"]) || isNaN(this[\"d\"])) {\n      return new Fraction(NaN);\n    }\n    return newFraction(Math.floor(places * this[\"s\"] * this[\"n\"] / this[\"d\"]), places);\n  },\n\n  /**\n   * Rounds a rational number\n   *\n   * Ex: new Fraction('4.(3)').round() => (4 / 1)\n   **/\n  \"round\": function(places) {\n\n    places = Math.pow(10, places || 0);\n\n    if (isNaN(this[\"n\"]) || isNaN(this[\"d\"])) {\n      return new Fraction(NaN);\n    }\n    return newFraction(Math.round(places * this[\"s\"] * this[\"n\"] / this[\"d\"]), places);\n  },\n\n  /**\n   * Rounds a rational number to a multiple of another rational number\n   *\n   * Ex: new Fraction('0.9').roundTo(\"1/8\") => 7 / 8\n   **/\n  \"roundTo\": function(a, b) {\n\n    /*\n    k * x/y ≤ a/b < (k+1) * x/y\n    ⇔ k ≤ a/b / (x/y) < (k+1)\n    ⇔ k = floor(a/b * y/x)\n    */\n\n    parse(a, b);\n\n    return newFraction(this['s'] * Math.round(this['n'] * P['d'] / (this['d'] * P['n'])) * P['n'], P['d']);\n  },\n\n  /**\n   * Gets the inverse of the fraction, means numerator and denominator are exchanged\n   *\n   * Ex: new Fraction([-3, 4]).inverse() => -4 / 3\n   **/\n  \"inverse\": function() {\n\n    return newFraction(this[\"s\"] * this[\"d\"], this[\"n\"]);\n  },\n\n  /**\n   * Calculates the fraction to some rational exponent, if possible\n   *\n   * Ex: new Fraction(-1,2).pow(-3) => -8\n   */\n  \"pow\": function(a, b) {\n\n    parse(a, b);\n\n    // Trivial case when exp is an integer\n\n    if (P['d'] === 1) {\n\n      if (P['s'] < 0) {\n        return newFraction(Math.pow(this['s'] * this[\"d\"], P['n']), Math.pow(this[\"n\"], P['n']));\n      } else {\n        return newFraction(Math.pow(this['s'] * this[\"n\"], P['n']), Math.pow(this[\"d\"], P['n']));\n      }\n    }\n\n    // Negative roots become complex\n    //     (-a/b)^(c/d) = x\n    // <=> (-1)^(c/d) * (a/b)^(c/d) = x\n    // <=> (cos(pi) + i*sin(pi))^(c/d) * (a/b)^(c/d) = x         # rotate 1 by 180°\n    // <=> (cos(c*pi/d) + i*sin(c*pi/d)) * (a/b)^(c/d) = x       # DeMoivre's formula in Q ( https://proofwiki.org/wiki/De_Moivre%27s_Formula/Rational_Index )\n    // From which follows that only for c=0 the root is non-complex. c/d is a reduced fraction, so that sin(c/dpi)=0 occurs for d=1, which is handled by our trivial case.\n    if (this['s'] < 0) return null;\n\n    // Now prime factor n and d\n    var N = factorize(this['n']);\n    var D = factorize(this['d']);\n\n    // Exponentiate and take root for n and d individually\n    var n = 1;\n    var d = 1;\n    for (var k in N) {\n      if (k === '1') continue;\n      if (k === '0') {\n        n = 0;\n        break;\n      }\n      N[k]*= P['n'];\n\n      if (N[k] % P['d'] === 0) {\n        N[k]/= P['d'];\n      } else return null;\n      n*= Math.pow(k, N[k]);\n    }\n\n    for (var k in D) {\n      if (k === '1') continue;\n      D[k]*= P['n'];\n\n      if (D[k] % P['d'] === 0) {\n        D[k]/= P['d'];\n      } else return null;\n      d*= Math.pow(k, D[k]);\n    }\n\n    if (P['s'] < 0) {\n      return newFraction(d, n);\n    }\n    return newFraction(n, d);\n  },\n\n  /**\n   * Check if two rational numbers are the same\n   *\n   * Ex: new Fraction(19.6).equals([98, 5]);\n   **/\n  \"equals\": function(a, b) {\n\n    parse(a, b);\n    return this[\"s\"] * this[\"n\"] * P[\"d\"] === P[\"s\"] * P[\"n\"] * this[\"d\"]; // Same as compare() === 0\n  },\n\n  /**\n   * Check if two rational numbers are the same\n   *\n   * Ex: new Fraction(19.6).equals([98, 5]);\n   **/\n  \"compare\": function(a, b) {\n\n    parse(a, b);\n    var t = (this[\"s\"] * this[\"n\"] * P[\"d\"] - P[\"s\"] * P[\"n\"] * this[\"d\"]);\n    return (0 < t) - (t < 0);\n  },\n\n  \"simplify\": function(eps) {\n\n    if (isNaN(this['n']) || isNaN(this['d'])) {\n      return this;\n    }\n\n    eps = eps || 0.001;\n\n    var thisABS = this['abs']();\n    var cont = thisABS['toContinued']();\n\n    for (var i = 1; i < cont.length; i++) {\n\n      var s = newFraction(cont[i - 1], 1);\n      for (var k = i - 2; k >= 0; k--) {\n        s = s['inverse']()['add'](cont[k]);\n      }\n\n      if (Math.abs(s['sub'](thisABS).valueOf()) < eps) {\n        return s['mul'](this['s']);\n      }\n    }\n    return this;\n  },\n\n  /**\n   * Check if two rational numbers are divisible\n   *\n   * Ex: new Fraction(19.6).divisible(1.5);\n   */\n  \"divisible\": function(a, b) {\n\n    parse(a, b);\n    return !(!(P[\"n\"] * this[\"d\"]) || ((this[\"n\"] * P[\"d\"]) % (P[\"n\"] * this[\"d\"])));\n  },\n\n  /**\n   * Returns a decimal representation of the fraction\n   *\n   * Ex: new Fraction(\"100.'91823'\").valueOf() => 100.91823918239183\n   **/\n  'valueOf': function() {\n\n    return this[\"s\"] * this[\"n\"] / this[\"d\"];\n  },\n\n  /**\n   * Returns a string-fraction representation of a Fraction object\n   *\n   * Ex: new Fraction(\"1.'3'\").toFraction(true) => \"4 1/3\"\n   **/\n  'toFraction': function(excludeWhole) {\n\n    var whole, str = \"\";\n    var n = this[\"n\"];\n    var d = this[\"d\"];\n    if (this[\"s\"] < 0) {\n      str+= '-';\n    }\n\n    if (d === 1) {\n      str+= n;\n    } else {\n\n      if (excludeWhole && (whole = Math.floor(n / d)) > 0) {\n        str+= whole;\n        str+= \" \";\n        n%= d;\n      }\n\n      str+= n;\n      str+= '/';\n      str+= d;\n    }\n    return str;\n  },\n\n  /**\n   * Returns a latex representation of a Fraction object\n   *\n   * Ex: new Fraction(\"1.'3'\").toLatex() => \"\\frac{4}{3}\"\n   **/\n  'toLatex': function(excludeWhole) {\n\n    var whole, str = \"\";\n    var n = this[\"n\"];\n    var d = this[\"d\"];\n    if (this[\"s\"] < 0) {\n      str+= '-';\n    }\n\n    if (d === 1) {\n      str+= n;\n    } else {\n\n      if (excludeWhole && (whole = Math.floor(n / d)) > 0) {\n        str+= whole;\n        n%= d;\n      }\n\n      str+= \"\\\\frac{\";\n      str+= n;\n      str+= '}{';\n      str+= d;\n      str+= '}';\n    }\n    return str;\n  },\n\n  /**\n   * Returns an array of continued fraction elements\n   *\n   * Ex: new Fraction(\"7/8\").toContinued() => [0,1,7]\n   */\n  'toContinued': function() {\n\n    var t;\n    var a = this['n'];\n    var b = this['d'];\n    var res = [];\n\n    if (isNaN(a) || isNaN(b)) {\n      return res;\n    }\n\n    do {\n      res.push(Math.floor(a / b));\n      t = a % b;\n      a = b;\n      b = t;\n    } while (a !== 1);\n\n    return res;\n  },\n\n  /**\n   * Creates a string representation of a fraction with all digits\n   *\n   * Ex: new Fraction(\"100.'91823'\").toString() => \"100.(91823)\"\n   **/\n  'toString': function(dec) {\n\n    var N = this[\"n\"];\n    var D = this[\"d\"];\n\n    if (isNaN(N) || isNaN(D)) {\n      return \"NaN\";\n    }\n\n    dec = dec || 15; // 15 = decimal places when no repetation\n\n    var cycLen = cycleLen(N, D); // Cycle length\n    var cycOff = cycleStart(N, D, cycLen); // Cycle start\n\n    var str = this['s'] < 0 ? \"-\" : \"\";\n\n    str+= N / D | 0;\n\n    N%= D;\n    N*= 10;\n\n    if (N)\n      str+= \".\";\n\n    if (cycLen) {\n\n      for (var i = cycOff; i--;) {\n        str+= N / D | 0;\n        N%= D;\n        N*= 10;\n      }\n      str+= \"(\";\n      for (var i = cycLen; i--;) {\n        str+= N / D | 0;\n        N%= D;\n        N*= 10;\n      }\n      str+= \")\";\n    } else {\n      for (var i = dec; N && i--;) {\n        str+= N / D | 0;\n        N%= D;\n        N*= 10;\n      }\n    }\n    return str;\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}